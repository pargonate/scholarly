---
import Layout from "../layouts/Layout.astro";
import Nav from "../components/Nav.astro";
---
<Layout title="Landing Page" description="Showcase of Scholarly and what it can do">
	<h1>Welcome to Scholarly!</h1>
</Layout>
<style>
	table {
		border-collapse: collapse;
		width: 100%;
	}

	th,
	td {
		border: 1px solid #ddd;
		padding: 8px;
	}

	#courseName-wrapper {
		display: flex;
		gap: 15px;
	}

		#courseControls {
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 5px;
		}

	.courseControl {
		all: unset;
		line-height: 0px;
		cursor: pointer;
	}

	th {
		background-color: #f2f2f2;
		text-align: left;
	}
</style>
<script defer>
	//
	// Deleting a Course
	//	Since deletion is an action, that doesn't need to edit any values,
	//	we must assign a event listener to a button to execute a DELETE
	//	request.
	//

	const courseDelete = document.querySelectorAll(".courseDelete");

	// Assign the delete operation to all buttons (since there will be many courses)
	courseDelete.forEach(control => {
		control.addEventListener("click", async (e) => {
			e.preventDefault();
			// Course Properties stored in attributes for efficient retrieval 
			let courseID = control.getAttribute("data-courseID");
			let courseName = control.getAttribute("data-courseName")

			// Confirmation just to be safe
			if (confirm(`Are you sure you want to the ${courseName} course?`)) {
				try {
					await fetch(`api/course/${courseID}`, {
						method: "DELETE"
					});
				} catch (error) {
					alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
					console.log(`ðŸ›‘ Course ${courseID} failed to DELETE: ${error}`);
				}

				alert(`Course ${courseName} deleted!`);
				console.log(`âœ… Course ${courseName} deleted!`);
				// Auto reload (because I care about my user's time)
				window.location.reload();
			}
		});
	});
</script>
