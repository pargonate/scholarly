---
// Route Protection (Server)
import { protectRoute } from "../lib/auth.ts";
import { supabase } from "../lib/supabase";
const result = await protectRoute(Astro);

if (result.redirect) {
	return Astro.redirect(result.redirect);
}

// Server-Client 
import Layout from "../layouts/Layout.astro";
import { Icon } from "astro-icon/components";

let courses = []

try {
	const response = await fetch(`${import.meta.env.SERVER_URL}/api/courses`);
	courses = await response.json();
} catch (error) {
	console.log(`ðŸ›‘ Supabase failed to GET: ${error}`);
}

// Getting user
const { data: userData, error: userError } = await supabase.auth.getUser();

let user = null;

if (userData?.user) {
    const { data: userRole, error: roleError } = await supabase
        .from("user_roles")
        .select()
        .eq("id", userData.user.id);

    if (!roleError && userRole?.length > 0) {
        user = {
			id: userData.user.id,
			role: userRole[0].role
        };
    }
}

---

<Layout title="Courses" description="See all courses">
	<table>
		<thead>
			<tr>
				<th>Name</th>
				<th>Teacher</th>
				<th>Subject</th>
				<th>Description</th>
				<th>Credits</th>
			</tr>
		</thead>
		<tbody>
			{courses.map((course) => (
				<tr>
					<td>
						<div id="courseName-wrapper">
							{course.name} ({course.course_id})
							<div id="courseControls">
								{/* 
									Since editing isn't an immediate action (unlike delete),
									we send the user to the backend-enabled form /composer.
								*/}
								{user?.role === "Teacher" && (
									<a href={`/composer?mode=modify&id=${course.course_id}`} class="courseControl">
										<Icon name="ri:pencil-fill" />
									</a>
									<button class="courseDelete courseControl" data-courseID={course.course_id} data-courseName={course.name} data-userRole={user.role}>
										<Icon name="ri:delete-bin-5-line" />
									</button>
								)}
								{user?.role === "Student" && (
									<button class="courseAdd courseControl" data-courseID={course.course_id} data-courseName={course.name} data-userID={user.id}>
										<Icon name="ri:add-fill" />
									</button>
								)}
							</div>
						</div>
					</td>
					<td>{course.creator_name}</td>
					<td>{course.subject}</td>
					<td>{course.description}</td>
					<td>{course.credits}</td>
				</tr>
			))}
		</tbody>
	</table>	
	{user?.role === "Teacher" && (
		<a href="/composer"><button>Create a Course</button></a>	
	)}
</Layout>
<style>
	table {
		border-collapse: collapse;
		width: 100%;
		color: #FFF;
	}

	th,
	td {
		border: 1px solid #000;
		padding: 8px;
		/* width: fit-content; */
	}

	#courseName-wrapper {
		display: flex;
		gap: 15px;
	}

		#courseControls {
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 5px;
		}

	.courseControl {
		all: unset;
		line-height: 0px;
		cursor: pointer;
	}

	th {
		background-color: #0a0a0a;
		text-align: left;
	}
</style>
<script defer>
	document.addEventListener("DOMContentLoaded", () => {
		const url = new URL(window.location.href);
		const type = url.searchParams.get("alert");

		if (type === "student-restriction") {
			alert("You're a student, you cannot edit, delete, or create courses. You can only add them to your schedule.");
		}
	});

	//
	// Deleting a Course
	//	Since deletion is an action, that doesn't need to edit any values,
	//	we must assign a event listener to a button to execute a DELETE
	//	request.
	//

	const courseDelete = document.querySelectorAll(".courseDelete");
	const courseAdd = document.querySelectorAll(".courseAdd");

	// Assign the delete operation to all buttons (since there will be many courses)
	courseDelete.forEach(control => {
		control.addEventListener("click", async (e) => {
			e.preventDefault();
			// Course Properties stored in attributes for efficient retrieval 
			let userRole = control.getAttribute("data-userRole");
			let courseID = control.getAttribute("data-courseID");
			let courseName = control.getAttribute("data-courseName");


			if (userRole == "Teacher") {
				// Confirmation just to be safe
				if (confirm(`Are you sure you want to the ${courseName} course?`)) {
					try {
						await fetch(`api/course/${courseID}`, {
							method: "DELETE"
						});
					} catch (error) {
						alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
						console.log(`ðŸ›‘ Course ${courseID} failed to DELETE: ${error}`);
					}

					alert(`Course ${courseName} deleted!`);
					console.log(`âœ… Course ${courseName} deleted!`);
					// Auto reload (because I care about my user's time)
					window.location.reload();
				}
			} else {
				alert("You're a student, you cannot delete courses. You can only add them to your schedule.");
			}
		});
	});

	// Same goes for adding a course to a schedule
	courseAdd.forEach(control => {
		control.addEventListener("click", async(e) => {
			e.preventDefault();
			let courseID = control.getAttribute("data-courseID");
			let courseName = control.getAttribute("data-courseName")
			let userID = control.getAttribute("data-userID");

			if (confirm(`Are you sure you want to add ${courseName} to your schedule?`)) {
				try {
					await fetch(`/api/schedule/user/${userID}`, {
						method: "POST",
						body: JSON.stringify({
							course_id: courseID,
							user_id: userID
						}),
					});

					console.log(`âœ… Course ${courseName} added to schedule!`);
					alert(`Course ${courseName} added to schedule!`);
				} catch (error) {
					alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
					console.log(`ðŸ›‘ Course ${courseName} failed to POST: ${error}`);					
				}
			}
		});
	});
</script>