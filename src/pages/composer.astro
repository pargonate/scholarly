---
// Route Protection (Server)
import { protectRoute } from "../lib/auth.ts";
const result = await protectRoute(Astro);

if (result.redirect) {
	return Astro.redirect(result.redirect);
}

// Server-Client 
import Layout from "../layouts/Layout.astro";
import Form from "../components/Form.astro";
import { supabase } from "../lib/supabase";


const { data: userData, error: userError } = await supabase.auth.getUser();

let user = null;

if (userData?.user) {
    const { data: userRole, error: roleError } = await supabase
        .from("user_roles")
        .select()
        .eq("id", userData.user.id);

    if (!roleError && userRole?.length > 0) {
        user = {
			id: userData.user.id,
            firstName: userData.user.user_metadata.first_name,
            lastName: userData.user.user_metadata.last_name,
            role: userRole[0].role,
        };
    }
}

if (user?.role === "Student") {
	return Astro.redirect("/courses?alert=student-restriction");
}
---

<Layout title="Course Composer" description="Add & Edit courses with an form">
	<Form>
		<h1>Edit a Course</h1>
		<form id="form">
			<!-- When adding, there will be no courseID (since it doesn't exist yet) -->
			<div class="input" id="ID-area" hidden>
				<label for="courseID">ID:</label>
				<input type="text" id="courseID" name="courseID" disabled />
			</div>
			<div class="input"id="creator-area" hidden>
				<label for="creator">Creator:</label>
				<input type="text" id="creator" name="creator" disabled />
			</div>
			<div class="input">
				<label for="courseName">Name:</label>
				<input type="text" id="courseName" name="courseName" required />
			</div>
			<div class="input">
				<label for="courseSubject">Subject Area:</label>
				<input type="text" id="courseSubject" name="courseSubject" required />
			</div>
			<div class="input">
				<label for="courseDescription">Description:</label>
				<textarea id="courseDescription" name="courseDescription" required></textarea>
			</div>
			<div class="input">
				<label for="courseCredits">Credit(s):</label>
				<input type="number" id="courseCredits" name="courseCredits" required />
			</div>
			<button type="submit" id="courseSubmit">Create Course</button>
		</form>		
	</Form>
</Layout>
<script defer define:vars={{ user }}> 
	var mode = "";
	// With putting the POST and PUT methods together, Supabase will take
	// anything for a variable, thus we have to create our own for
	// consistency.
	var courseID = crypto.randomUUID();

	// Perform fetch() API requests to my backend API, to be sent to Supabase
	async function compose(mode, courseName, courseSubject, courseDescription, courseCredits) {
		if (mode == "") {
			try {
				await fetch(`/api/course/${courseID}`, {
					method: "POST",
					body: JSON.stringify ({
						creator_id: user.id,
						creator_name: `${user.firstName} ${user.lastName}`,
						course_id: courseID,
						name: courseName,
						subject: courseSubject,
						description: courseDescription,
						credits: courseCredits
					}),
				});
			} catch (error) {
				alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
				console.log(`ðŸ›‘ Course ${courseName} failed to POST: ${error}`);
			}
		} else if (mode == "modify") {
			// Doesn't include creator_name because it would be illogical
			// to change as then it wouldn't reflect the original creator.
			try {
				await fetch(`/api/course/${courseID}`, {
					method: "PUT",
					body: JSON.stringify ({
						creator_id: user.id,
						course_id: courseID,
						name: courseName,
						subject: courseSubject,
						description: courseDescription,
						credits: courseCredits
					}),
				});
			} catch (error) {
				alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
				console.log(`ðŸ›‘ Course ${courseName} failed to PUT: ${error}`);					
			}
		}

		// Change verbiage based on mode
		if (mode == "") {
			console.log(`âœ… Course ${courseName} created!`);
			alert(`Course ${courseName} created!`);
		} else if (mode == "modify") {
			console.log(`âœ… Course ${courseName} updated!`);
			alert(`Course ${courseName} updated!`);
		}
		
		// Since action is completed, they don't need to be within the composer anymore
		window.location.href = "/courses";
	}

		document.addEventListener('DOMContentLoaded', () => {
		// Get search params
		const url = new URL(window.location.href);
		const params = url.searchParams;

		if (params.get("mode") === "modify") {
			mode = "modify";
			courseID = params.get("id") || "0";

			// Auto-fill the courseID, course information, and change the button text
			document.getElementById("ID-area").hidden = false;
			document.getElementById("courseID").value = courseID;

			document.getElementById("creator-area").hidden = false;

			document.getElementById("courseSubmit").textContent = "Modify Course";

			try {
				fetch(`api/course/${courseID}`)
				.then((response) => response.json())
				.then((json) => 
					{
						document.getElementById("creator").value = json.data[0].creator_name;
						document.getElementById("courseName").value = json.data[0].name;
						document.getElementById("courseSubject").value = json.data[0].subject;
						document.getElementById("courseDescription").value = json.data[0].description;
						document.getElementById("courseCredits").value = json.data[0].credits;
					}
				);
			} catch (error) {
				alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
				console.log(`ðŸ›‘ Course ${courseID} failed to GET: ${error}`);
			}

			console.log(`âœ… Course ${courseName}'s info fetched!`);
		}
	});

	// Handle submit requests
	document.getElementById("courseSubmit").addEventListener("click", (e) => {
		e.preventDefault();

		const courseName = document.getElementById("courseName").value;
		const courseSubject = document.getElementById("courseSubject").value;
		const courseDescription = document.getElementById("courseDescription").value;
		const courseCredits = document.getElementById("courseCredits").value;

		if (!courseName || !courseSubject || !courseDescription || !courseCredits) {
			console.log("Fields Missing!")
			alert("Fields Missing!")
		} else {
			compose(mode, courseName, courseSubject, courseDescription, parseInt(courseCredits))
		}
	})
</script>