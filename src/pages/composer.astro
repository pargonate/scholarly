---
// Route Protection (Server)
import { protectRoute } from "../lib/auth.ts";
const result = await protectRoute(Astro);

if (result.redirect) {
	return Astro.redirect(result.redirect);
}

// Server-Client 
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

const { data, error } = await supabase.auth.getUser();

if (error) {
	return new Response("User authentication failed", { status: 401 });
}

const user = data.user;
const metadata = user.user_metadata;
---

<Layout title="Course Composer" description="Add & Edit courses with an form">
	<form>
		<!-- When adding, there will be no courseID (since it doesn't exist yet) -->
		<div id="ID-area" hidden>
			<label for="courseID">ID:</label>
			<input type="text" id="courseID" name="courseID" disabled />
		</div>
		<div>
			<label for="courseName">Name:</label>
			<input type="text" id="courseName" name="courseName" required />
		</div>
		<div>
			<label for="courseSubject">Subject Area:</label>
			<input type="text" id="courseSubject" name="courseSubject" required />
		</div>
		<div>
			<label for="courseDescription">Description:</label>
			<textarea id="courseDescription" name="courseDescription" required></textarea>
		</div>
		<div>
			<label for="courseCredits">Credit(s):</label>
			<input type="number" id="courseCredits" name="courseCredits" required />
		</div>
		<button type="submit" id="courseSubmit">Create Course</button>
	</form>
	<script defer define:vars={{ user, metadata }}> 
		var mode = "";
		// With putting the POST and PUT methods together, Supabase will take
		// anything for a variable, thus we have to create our own for
		// consistency.
		var courseID = crypto.randomUUID();

		// Perform fetch() API requests to my backend API, to be sent to Supabase
		async function compose(mode, courseName, courseSubject, courseDescription, courseCredits) {
			try {
				await fetch(`api/course/${courseID}`, {
					method: "POST",
					body: JSON.stringify ({
						creator_id: user.id,
						creator_name: `${metadata.first_name} ${metadata.last_name}`,
						name: courseName,
						subject: courseSubject,
						description: courseDescription,
						credits: courseCredits
					}),
				});
			} catch (error) {
				if (mode == "") {
					alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
					console.log(`ðŸ›‘ Course ${courseName} failed to POST: ${error}`);
				} else if (mode == "modify") {
					alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
					console.log(`ðŸ›‘ Course ${courseName} failed to UPDATE: ${error}`);					
				}
			}

			// Change verbiage based on mode
			if (mode == "") {
				console.log(`âœ… Course ${courseName} created!`);
				alert(`Course ${courseName} created!`);
			} else if (mode == "modify") {
				console.log(`âœ… Course ${courseName} updated!`);
				alert(`Course ${courseName} updated!`);
			}
			
			// Since action is completed, they don't need to be within the composer anymore
			window.location.href = "/courses";
		}

		document.addEventListener('DOMContentLoaded', () => {
			// Get search params
			const url = new URL(window.location.href);
			const params = url.searchParams;

			if (params.get("mode") === "modify") {
				mode = "modify";
				courseID = params.get("id") || "0";

				// Auto-fill the courseID, course information, and change the button text
				document.getElementById("ID-area").hidden = false;
				document.getElementById("courseID").value = courseID;
				document.getElementById("courseSubmit").textContent = "Modify Course";

				try {
					fetch(`api/course/${courseID}`)
					.then((response) => response.json())
					.then((json) => 
						{
							document.getElementById("courseName").value = json.name;
							document.getElementById("courseSubject").value = json.subject;
							document.getElementById("courseDescription").value = json.description;
							document.getElementById("courseCredits").value = json.credits;
						}
					);
				} catch (error) {
					alert("An error occurred. Please try again later, or check the console (CTRL + SHIFT + I) for more information.");
					console.log(`ðŸ›‘ Course ${courseID} failed to GET: ${error}`);
				}

				console.log(`âœ… Course ${courseName}'s info fetched!`);
			}
		});

		// Handle submit requests
		document.getElementById("courseSubmit").addEventListener("click", (e) => {
			e.preventDefault();

			const courseName = document.getElementById("courseName").value;
			const courseSubject = document.getElementById("courseSubject").value;
			const courseDescription = document.getElementById("courseDescription").value;
			const courseCredits = document.getElementById("courseCredits").value;

			if (!courseName || !courseSubject || !courseDescription || !courseCredits) {
				console.log("Fields Missing!")
				alert("Fields Missing!")
			} else {
				compose(mode, courseName, courseSubject, courseDescription, parseInt(courseCredits))
			}
		})
	</script>
</Layout>